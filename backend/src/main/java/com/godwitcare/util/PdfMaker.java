// src/main/java/com/godwitcare/util/PdfMaker.java
package com.godwitcare.util;

import org.apache.pdfbox.pdmodel.*;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDType1Font;

import java.io.ByteArrayOutputStream;
import java.time.format.DateTimeFormatter;
import java.util.List;

public class PdfMaker {
    public static byte[] makePrescriptionPdf(
            String logoText, String patientName, String patientDob, String patientPhone,
            String patientId, String diagnosis, String history, List<String> meds
    ) throws Exception {

        try (PDDocument doc = new PDDocument()) {
            PDPage page = new PDPage(PDRectangle.A4);
            doc.addPage(page);

            PDPageContentStream cs = new PDPageContentStream(doc, page);
            float margin = 50;
            float y = page.getMediaBox().getHeight() - margin;

            // Header
            cs.setFont(PDType1Font.HELVETICA_BOLD, 18);
            cs.beginText(); cs.newLineAtOffset(margin, y);
            cs.showText("Prescription"); cs.endText();

            y -= 24;

            // Logo / brand
            cs.setFont(PDType1Font.HELVETICA_BOLD, 12);
            cs.beginText(); cs.newLineAtOffset(margin, y);
            cs.showText(logoText != null ? logoText : "GodwitCare • Care Beyond Borders");
            cs.endText();

            // Patient panel (right)
            cs.setFont(PDType1Font.HELVETICA, 10);
            float rightColX = page.getMediaBox().getWidth() - margin - 220;
            y = page.getMediaBox().getHeight() - margin - 8;
            cs.beginText(); cs.newLineAtOffset(rightColX, y);
            cs.showText("Patient Information"); cs.endText();
            y -= 14;

            writePair(cs, rightColX, y, "Name: ", patientName); y -= 12;
            writePair(cs, rightColX, y, "DOB: ", safe(patientDob)); y -= 12;
            writePair(cs, rightColX, y, "Contact: ", safe(patientPhone)); y -= 12;
            writePair(cs, rightColX, y, "Patient ID: ", safe(patientId)); y -= 20;

            // Diagnosis
            y -= 10;
            drawHeading(cs, margin, y, "Diagnosis"); y -= 14;
            drawParagraph(cs, margin, y, 490, diagnosis); y -= measureTextHeight(diagnosis, 490) + 10;

            // History
            drawHeading(cs, margin, y, "History of Presenting Complaint"); y -= 14;
            drawParagraph(cs, margin, y, 490, history); y -= measureTextHeight(history, 490) + 10;

            // Medicines
            drawHeading(cs, margin, y, "Medication Prescribed"); y -= 14;
            if (meds != null && !meds.isEmpty()) {
                cs.setFont(PDType1Font.HELVETICA, 11);
                for (int i = 0; i < meds.size(); i++) {
                    String line = (i + 1) + ". " + meds.get(i);
                    cs.beginText(); cs.newLineAtOffset(margin, y); cs.showText(line); cs.endText();
                    y -= 14;
                }
            } else {
                cs.setFont(PDType1Font.HELVETICA_OBLIQUE, 10);
                cs.beginText(); cs.newLineAtOffset(margin, y); cs.showText("—"); cs.endText();
                y -= 14;
            }

            // Footer
            y = 60;
            cs.setFont(PDType1Font.HELVETICA, 9);
            cs.beginText(); cs.newLineAtOffset(margin, y);
            cs.showText("Digitally generated by GodwitCare • " +
                    DateTimeFormatter.ISO_INSTANT.format(java.time.Instant.now()));
            cs.endText();

            cs.close();

            ByteArrayOutputStream out = new ByteArrayOutputStream();
            doc.save(out);
            return out.toByteArray();
        }
    }

    private static void drawHeading(PDPageContentStream cs, float x, float y, String text) throws Exception {
        cs.setFont(PDType1Font.HELVETICA_BOLD, 12);
        cs.beginText(); cs.newLineAtOffset(x, y); cs.showText(text); cs.endText();
    }

    private static void drawParagraph(PDPageContentStream cs, float x, float y, float width, String text) throws Exception {
        String t = safe(text);
        cs.setFont(PDType1Font.HELVETICA, 11);
        float lineHeight = 14f;
        for (String line : wrap(t, width)) {
            cs.beginText(); cs.newLineAtOffset(x, y); cs.showText(line); cs.endText();
            y -= lineHeight;
        }
    }

    private static float measureTextHeight(String text, float width) {
        float lineHeight = 14f;
        return wrap(safe(text), width).size() * lineHeight;
    }

    // super-light wrapper; replace with a more robust wrapper if needed
    private static java.util.List<String> wrap(String text, float width) {
        int maxChars = 90; // heuristic for Helvetica, ~width 490
        java.util.List<String> lines = new java.util.ArrayList<>();
        if (text == null || text.isBlank()) return lines;
        String[] words = text.split("\\s+");
        StringBuilder cur = new StringBuilder();
        for (String w : words) {
            if (cur.length() + w.length() + 1 > maxChars) {
                lines.add(cur.toString()); cur.setLength(0);
            }
            if (cur.length() > 0) cur.append(' ');
            cur.append(w);
        }
        if (cur.length() > 0) lines.add(cur.toString());
        return lines;
    }

    private static void writePair(PDPageContentStream cs, float x, float y, String k, String v) throws Exception {
        cs.setFont(PDType1Font.HELVETICA_BOLD, 10);
        cs.beginText(); cs.newLineAtOffset(x, y); cs.showText(k); cs.endText();
        float off = x + 42;
        cs.setFont(PDType1Font.HELVETICA, 10);
        cs.beginText(); cs.newLineAtOffset(off, y); cs.showText(v); cs.endText();
    }

    private static String safe(String s){ return (s==null || s.isBlank()) ? "—" : s; }
}
